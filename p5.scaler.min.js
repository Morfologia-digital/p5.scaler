function createAdaptiveGraphics(t,s,i){t=new AdaptiveBuffer(createGraphics(t,s),i);return scaler.t(t),scaler.i(),t}function addAdaptiveGraphics(t,s){t=new AdaptiveBuffer(t,s);scaler.t(t),scaler.i()}p5.prototype.scaler=void 0,p5.prototype.createAdaptiveCanvas=function(t,s,i){var e=createCanvas(t,s);return scaler=new Scaler(t,s,void 0===i),e},p5.prototype.h=function(){void 0!==scaler&&scale(scaler.scale())},window.addEventListener("resize",function(t){scaler.o()},!0),p5.prototype.registerMethod("pre",p5.prototype.h);class AdaptiveBuffer{#l;#u;constructor(t,s){this.#l=t,this.#u=s}reRender(){this.#u(this.#l)}graphics(){return this.#l}}class Scaler{#p;#v;#A;#g;#B;#C;constructor(t,s,i){this.#p=t,this.#v=s,this.#A=this.#p/this.#v,this.#B=i,this.#C=[],this.#B&&this.o()}o(){this.#B&&this.M(window.innerWidth,window.innerHeight)}scaleCanvasTo(t){this.M(this.#p*t,this.#v*t)}M(t,s){let i,e;var r=Math.abs(this.#p-t),h=Math.abs(this.#v-s);Math.min(r,h)==r?(i=t,(e=t/this.#A)>s&&(e=s,i=s*this.#A)):(e=window.innerHeight,(i=window.innerHeight*this.#A)>t&&(i=t,e=t/this.#A)),this.#g=i/this.#p,resizeCanvas(i,e),this.i()}width(){return this.#p}height(){return this.#v}scale(){return this.#g}i(){for(let t=0;t<this.#C.length;t++)this.#C[t].graphics().pixelDensity(Math.ceil(this.#g)),this.#C[t].reRender()}t(t){this.#C.push(t)}}